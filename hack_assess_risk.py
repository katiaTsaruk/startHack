import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import seaborn as sns

# The following data can be automatically generated by retrieving the data from Google or official company websites
# Example competitor data
data = {
    "Company": ["VARTA", "Energizer"],
    "R&D_Spending": [33, 30],  # Millions
    "Patents": [55, 142],
    "Product_Launches": [3, 7],
    "Revenue": [809.9, 805],  # Millions
}

df = pd.DataFrame(data)

# Normalize the data for scoring
scaler = MinMaxScaler()
normalized_data = scaler.fit_transform(df[["R&D_Spending", "Patents", "Product_Launches"]])
df[["R&D_Score", "Patent_Score", "Launch_Score"]] = normalized_data

# Aggregate Innovation Score
df["Innovation_Score"] = df[["R&D_Score", "Patent_Score", "Launch_Score"]].mean(axis=1)

# Calculate Risk Score (inverse of Innovation Score)
df["Risk_Score"] = 1 - df["Innovation_Score"]

# Rank Companies by Innovation Score
df = df.sort_values(by="Innovation_Score", ascending=False)

# Display results
print(df[["Company", "R&D_Score", "Patent_Score", "Launch_Score", "Innovation_Score", "Risk_Score"]])

# Define a modern color palette
colors = sns.color_palette("coolwarm", n_colors=2)  # Gradient-like colors: blue and red

# Generate individual bar charts for each company
for index, row in df.iterrows():
    company = row["Company"]
    scores = [row["Innovation_Score"], row["Risk_Score"]]
    labels = ["Innovation Score", "Risk Score"]

    # Create the figure
    plt.figure(figsize=(8, 6))

    # Bar chart with enhanced design
    bars = plt.bar(labels, scores, color=colors, alpha=0.85, edgecolor='black', linewidth=1.2)

    # Add title and labels
    plt.title(f"{company}: Innovation vs. Risk Scores", fontsize=18, fontweight='bold', pad=20)
    plt.ylabel("Score (Normalized)", fontsize=14, labelpad=10)
    plt.xticks(fontsize=12, color="black")
    plt.yticks(fontsize=12, color="black")
    plt.ylim(0, 1)  # Ensure scores fit on the y-axis (normalized between 0 and 1)

    # Add horizontal gridlines with subtle transparency
    plt.gca().yaxis.grid(True, linestyle="--", alpha=0.6)
    plt.gca().set_axisbelow(True)

    # Annotate bars with values
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2, height + 0.03, f"{height:.2f}",
                 ha='center', va='bottom', fontsize=12, fontweight='bold', color="darkblue")

    # Add a modern style background (optional)
    plt.gca().set_facecolor('#f5f5f5')  # Light grey background for better contrast

    # Show the plot
    plt.tight_layout()
    plt.show()